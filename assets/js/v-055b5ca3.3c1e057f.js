"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[415],{3456:(e,o,n)=>{n.r(o),n.d(o,{default:()=>q});var a=n(6252),t=n(3577);const s=(0,a.uE)('<h1 id="automatic-versioning" tabindex="-1"><a class="header-anchor" href="#automatic-versioning" aria-hidden="true">#</a> Automatic versioning</h1><p>The purpose of conventional commits is to be able to bump your project version and changelog automatically. Cocogitto allow you to do this with the <code>cog bump</code> command.</p><p>The <code>bump</code> subcommand will execute the following steps :</p><ol><li>Calculate the next version based on the commit types since the latest tag.</li><li>Append the changes for this version to <code>CHANGELOG.md</code>.</li><li>Execute a set configuration defined pre-bump hooks.</li><li>Create a version commit containing changes made during the previous steps.</li><li>Create a git tag on the version commit.</li><li>Execute a set of configuration defined post-bump hook.</li></ol><h3 id="auto-bump" tabindex="-1"><a class="header-anchor" href="#auto-bump" aria-hidden="true">#</a> Auto bump</h3><p>Assuming we are working on the following git repository :</p><div class="language-text ext-text"><pre class="language-text"><code>* (HEAD -&gt; master) feat: another cool feature\n* docs: add some documentation\n* fix: fix ugly bug\n* feat: add awesome feature\n* chore: initial commit\n</code></pre></div><p>Let us now create a version :</p><div class="language-text ext-text"><pre class="language-text"><code>‚ùØ cog bump --auto\nFound feature commit caef0f, bumping to 0.1.0\nSkipping irrelevant commit 025cc0 with type : docs\nFound bug fix commit e2af66, bumping to 0.1.1\nFound feature commit 1b87aa, bumping to 0.2.0\nBumped version : 0.0.0 -&gt; 0.2.0\n</code></pre></div><p>If we look again at our git log :</p><div class="language-text ext-text"><pre class="language-text"><code>(HEAD -&gt; master, tag: 0.2.0) chore(version): 0.2.0\n... \n</code></pre></div><p>Also, a <code>CHANGELOG.md</code> file have been created.</p><div class="language-markdown ext-md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> Changelog</span>\nAll notable changes to this project will be documented in this file.\nSee <span class="token url">[<span class="token content">conventional commits</span>](<span class="token url">https://www.conventionalcommits.org/</span>)</span> for commit guidelines.\n\n<span class="token hr punctuation">- - -</span>\n<span class="token title important"><span class="token punctuation">##</span> 0.2.0 - 2020-09-30</span>\n\n\n<span class="token title important"><span class="token punctuation">###</span> Bug Fixes</span>\n\ne2af66 - fix ugly bug - Paul Delafosse\n\n\n<span class="token title important"><span class="token punctuation">###</span> Documentation</span>\n\n025cc0 - add some documentation - Paul Delafosse\n\n\n<span class="token title important"><span class="token punctuation">###</span> Features</span>\n\ncaef0f - another cool feature - Paul Delafosse\n\n1b87aa - add awesome feature - Paul Delafosse\n\n\n<span class="token hr punctuation">- - -</span>\n\nThis changelog was generated by <span class="token url">[<span class="token content">cocogitto</span>](<span class="token url">https://github.com/oknozor/cocogitto</span>)</span>.\n</code></pre></div><p>You need to run <code>cog bump</code> with one of the following flags :</p><ul><li><code>--auto</code> : choose the next version for you (based on feature commit, bug fixes commit and BREAKING_CHANGE commit).</li><li><code>--major</code> : increment the MAJOR version.</li><li><code>--minor</code> : increment the MINOR version.</li><li><code>--patch</code> : increment the PATCH version.</li><li><code>--version &lt;version&gt;</code> : set version manually (ex : <code>cog bump --version 3.2.1</code>).</li></ul><p>You can also create pre-release version by adding the <code>--pre</code> flag to the bump command :</p><div class="language-bash ext-sh"><pre class="language-bash"><code>cog bump --major --pre <span class="token string">&quot;beta.1&quot;</span>\n</code></pre></div><p>Coming from <code>1.2.3</code> this would create the following tag : <code>2.0.0-beta.0</code>.</p><p>If you create a new version, the version changelog will be prepended to your changelog file separated by <code>- - -</code>. Note that if your project already contains a changelog you can tell <code>cog</code> about it by adding this to the file :</p><div class="language-markdown ext-md"><pre class="language-markdown"><code><span class="token hr punctuation">- - -</span>\n<span class="token hr punctuation">- - -</span>\n</code></pre></div><p>You might also need to adjust <code>changelog_path</code> in <code>cog.toml</code>.</p><p><strong>Note:</strong> <code>cog bump --auto</code> treats <code>0.y.z</code> versions specially, i.e. it will never do an auto bump to the <code>1.0.0</code> version, even if there are breaking changes. That way, you can keep adding features in the development stage and decide yourself, when your API is stable.</p><h2 id="bump-hooks" tabindex="-1"><a class="header-anchor" href="#bump-hooks" aria-hidden="true">#</a> Bump hooks</h2><h3 id="pre-bump-hooks" tabindex="-1"><a class="header-anchor" href="#pre-bump-hooks" aria-hidden="true">#</a> Pre bump hooks</h3><p>Creating git tag automatically is great but sometimes you need to edit some file with the new version number, or perform some additional checks before doing so.</p>',25),i=(0,a.Uk)("A typical example is editing your project manifest in your package manager configuration file. You can run pre bump commands with the "),c=(0,a.Uk)(" alias to reference the newly created version :"),l=(0,a.uE)('<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="token comment"># cog.toml</span>\n<span class="token key property">pre_bump_hooks</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;cargo build --release&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;cargo bump {{version}}&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div>',1),p=(0,a.Uk)("When running "),r=(0,a._)("code",null,"cog bump",-1),u=(0,a.Uk)(" these command will be run before creating the version commit. Assuming we are bumping to "),d=(0,a._)("code",null,"1.1.0",-1),m=(0,a.Uk)(", the "),g=(0,a.Uk)(" alias will be replaced with "),h=(0,a._)("code",null,"1.1.0",-1),k=(0,a.Uk)("."),b=(0,a.uE)('<h3 id="post-bump-hooks" tabindex="-1"><a class="header-anchor" href="#post-bump-hooks" aria-hidden="true">#</a> Post bump hooks</h3><p>You can tell <code>cog</code> to run commands after the bump.</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="token comment"># cog.toml</span>\n<span class="token key property">post_bump_hooks</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;git push&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;git push origin {{version}}&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;cargo publish&quot;</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h3 id="version-dsl" tabindex="-1"><a class="header-anchor" href="#version-dsl" aria-hidden="true">#</a> Version DSL</h3><p>It is common to bump your development branch version package manifest after creating a new release. A typical example in the java world would be to bump your maven snapshot on your development branch after a release.</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="token comment"># cog.toml</span>\n<span class="token key property">post_bump_hooks</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;git push&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;git push origin {{version}}&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;git checkout develop&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;git rebase master&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;mvn versions:set -DnewVersion={{version+minor-SNAPSHOT}}&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;coco chore \\&quot;bump snapshot to {{version+1minor-SNAPSHOT}}\\&quot;&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;git push&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>As you can see we are bumping the manifest using a small DSL. It as only a few keywords :</p><ul><li>start with the <code>version</code> keyword.</li><li>followed by the <code>+</code> operator.</li><li><code>major</code>, <code>minor</code> and <code>patch</code> to specify the kind of increment you want. Then an optional amount, default being one (<code>version+1minor</code> and <code>version+minor</code> being the same).</li><li>followed by any number of <code>+{amount}{kind}</code> (exemple: <code>version+2major+1patch</code>)</li><li>ended by any alphanumeric character (SemVer additional labels for pre-release and build metadata), here <code>-SNAPSHOT</code>.</li></ul><h3 id="builtin-git-hooks" tabindex="-1"><a class="header-anchor" href="#builtin-git-hooks" aria-hidden="true">#</a> Builtin git hooks</h3>',9),v=(0,a.Uk)("To protect your commit history, and your git remote, cog have builtins "),f={href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer"},y=(0,a.Uk)("git hooks"),w=(0,a.Uk)("."),x=(0,a.uE)('<p>You can install them all by running :</p><div class="language-text ext-text"><pre class="language-text"><code>cog install-hook all\n</code></pre></div><p>Or one by one, specifying the hook name :</p><ol><li><p>Pre-push hook</p><p>Enabling this hook will run <code>cog check</code> before pushing to remote.</p><div class="language-text ext-text"><pre class="language-text"><code>cog install-hooks pre-push\n</code></pre></div></li><li><p>Pre-commit hook</p><p>Enabling this hook will run <code>cog verify</code> before creating a new commit.</p><div class="language-text ext-text"><pre class="language-text"><code>cog install-hook pre-commit\n</code></pre></div></li></ol>',4),q={render:function(e,o){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[s,(0,a._)("p",null,[i,(0,a._)("code",null,(0,t.zw)(e.version),1),c]),l,(0,a._)("p",null,[p,r,u,d,m,(0,a._)("code",null,(0,t.zw)(e.version),1),g,h,k]),b,(0,a._)("p",null,[v,(0,a._)("a",f,[y,(0,a.Wm)(n)]),w]),x],64)}}},8055:(e,o,n)=>{n.r(o),n.d(o,{data:()=>a});const a={key:"v-055b5ca3",path:"/guide/versioning.html",title:"Automatic versioning",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"Auto bump",slug:"auto-bump",children:[]},{level:2,title:"Bump hooks",slug:"bump-hooks",children:[{level:3,title:"Pre bump hooks",slug:"pre-bump-hooks",children:[]},{level:3,title:"Post bump hooks",slug:"post-bump-hooks",children:[]},{level:3,title:"Version DSL",slug:"version-dsl",children:[]},{level:3,title:"Builtin git hooks",slug:"builtin-git-hooks",children:[]}]}],filePathRelative:"guide/versioning.md",git:{contributors:[{name:"Paul Delafosse",email:"paul.delafosse@protonmail.com",commits:1}]}}}}]);