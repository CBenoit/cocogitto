"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[593],{8657:(e,o,t)=>{t.r(o),t.d(o,{default:()=>C});var a=t(6252);const n=(0,a._)("h2",{id:"conventional-commits",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#conventional-commits","aria-hidden":"true"},"#"),(0,a.Uk)(" Conventional commits")],-1),c=(0,a._)("code",null,"coco",-1),s=(0,a.Uk)(" allows you to easily create commits respecting the "),i={href:"https://www.conventionalcommits.org/en/v1.0.0/",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("conventional commits specification"),l=(0,a.Uk)(". It comes with a set of predefined arguments named after conventional commit types and "),d={href:"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines",target:"_blank",rel:"noopener noreferrer"},g=(0,a.Uk)("Angular commit convention"),m=(0,a.uE)(" : <code>feat</code>, <code>fix</code>, <code>style</code>, <code>build</code>, <code>refactor</code>, <code>ci</code>, <code>test</code>, <code>perf</code>, <code>chore</code>, <code>revert</code>, <code>docs</code>.",23),p=(0,a.uE)('<p>As described in the specification conventional commits messages are structured as follows :</p><div class="language-text ext-text"><pre class="language-text"><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre></div><p>All <code>coco</code> commit type subcommands follows the same structure :</p><div class="language-text ext-text"><pre class="language-text"><code>coco {type} {message} [optional scope] [optional body] [optional footer]\n</code></pre></div><p>You need to remember that <code>coco</code> commit scope comes after the commit description. This allows using positional arguments instead of typing flags (ex: <code>coco -t {type} -s {scope} -m {message}... and so on</code>).</p><p><strong>Example :</strong> If you want to create the following commit : <code>feat: add awesome feature</code> :</p><div class="language-bash ext-sh"><pre class="language-bash"><code>coco feat <span class="token string">&quot;add awesome feature&quot;</span>\n</code></pre></div><h3 id="helpful-error-messages" tabindex="-1"><a class="header-anchor" href="#helpful-error-messages" aria-hidden="true">#</a> Helpful error messages</h3><p>Using <code>coco</code> should prevent a wide range of error in your conventional commit message. But if you still made a mistake <code>coco</code> will display an error explaining what went wrong :</p><div class="language-text ext-text"><pre class="language-text"><code>‚ùØ coco feat &quot;add ability to parse arrays&quot; &quot;sco(pe&quot;\nError: A scope value cannot contains inner parenthesis\n\nCaused by:\n     --&gt; 1:9\n      |\n    1 | feat(sco(pe): add ability to parse arrays\n      |         ^---\n      |\n      = expected no_parenthesis\n</code></pre></div><h3 id="breaking-changes" tabindex="-1"><a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a> Breaking changes</h3><p>All <code>coco</code> argument are positional except the optional <code>-B</code> flag used to create breaking changes commits :</p><div class="language-bash ext-sh"><pre class="language-bash"><code>coco fix -B <span class="token string">&quot;add fix a nasty bug&quot;</span> cli\n</code></pre></div>',13),u=(0,a.Uk)("This would create the following "),h={href:"https://www.conventionalcommits.org/en/v1.0.0/#commit-message-with--to-draw-attention-to-breaking-change",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("breaking change"),b=(0,a.Uk)(" commit : "),k=(0,a._)("code",null,"fix(cli)!: fix a nasty bug",-1),v=(0,a.Uk)("."),w=(0,a._)("code",null,"coco",-1),x=(0,a.Uk)(" use the "),y=(0,a._)("code",null,"!",-1),_=(0,a.Uk)(" notation to denote breaking changes commit because it can be easily seen in your git log, however if you manually create breaking changes commits with "),U={href:"https://www.conventionalcommits.org/en/v1.0.0/#commit-message-with-description-and-breaking-change-footer",target:"_blank",rel:"noopener noreferrer"},q=(0,a.Uk)("the footer notation"),B=(0,a.Uk)(" cocogitto tools will still pick them."),C={render:function(e,o){const t=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[n,(0,a._)("p",null,[c,s,(0,a._)("a",i,[r,(0,a.Wm)(t)]),l,(0,a._)("a",d,[g,(0,a.Wm)(t)]),m]),p,(0,a._)("p",null,[u,(0,a._)("a",h,[f,(0,a.Wm)(t)]),b,k,v]),(0,a._)("p",null,[w,x,y,_,(0,a._)("a",U,[q,(0,a.Wm)(t)]),B])],64)}}},8326:(e,o,t)=>{t.r(o),t.d(o,{data:()=>a});const a={key:"v-2cfbc7a2",path:"/guide/conventional-commits.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Conventional commits",slug:"conventional-commits",children:[{level:3,title:"Helpful error messages",slug:"helpful-error-messages",children:[]},{level:3,title:"Breaking changes",slug:"breaking-changes",children:[]}]}],filePathRelative:"guide/conventional-commits.md",git:{contributors:[{name:"Paul Delafosse",email:"paul.delafosse@protonmail.com",commits:1}]}}}}]);